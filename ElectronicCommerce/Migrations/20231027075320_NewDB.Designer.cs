// <auto-generated />
using System;
using ElectronicCommerce.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectronicCommerce.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231027075320_NewDB")]
    partial class NewDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElectronicCommerce.Areas.Admin.ViewModels.RolesModel", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ROLE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TOTAL_USER")
                        .HasColumnType("int");

                    b.ToTable("RolesModels");
                });

            modelBuilder.Entity("ElectronicCommerce.Areas.Admin.ViewModels.SaleReport", b =>
                {
                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<decimal>("TongTien")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("SaleReports");
                });

            modelBuilder.Entity("ElectronicCommerce.Areas.Admin.ViewModels.SaleReportOption", b =>
                {
                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TongTien")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("SaleReportOptions");
                });

            modelBuilder.Entity("ElectronicCommerce.Areas.Customer.Models.OverViewProductHomeFlag", b =>
                {
                    b.Property<bool?>("ACTIVE")
                        .HasColumnType("bit");

                    b.Property<int?>("DISCOUNT_VALUE")
                        .HasColumnType("int");

                    b.Property<string>("DIS_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMAGE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PRICE")
                        .HasColumnType("int");

                    b.Property<string>("PRODUCT_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNIT")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("OverViewProductHomeFlags");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUSTOMER_ID")
                        .IsFixedLength(true);

                    b.Property<bool>("Is_Check")
                        .HasColumnType("bit")
                        .HasColumnName("IS_CHECK");

                    b.Property<string>("OrderId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ORDER_ID")
                        .IsFixedLength(true);

                    b.Property<string>("ProductDetailId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_DETAIL_ID")
                        .IsFixedLength(true);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int?>("SavePrice")
                        .HasColumnType("int")
                        .HasColumnName("SAVEPRICE");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("CARTS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.CategoryProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.Property<string>("ParentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PARENT_ID")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CATEGORY_PRODUCTS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Avatar")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("AVATAR")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerTypeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUSTOMER_TYPE_ID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("IdCard")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("ID_CARD")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PHONE")
                        .IsFixedLength(true);

                    b.Property<int?>("ScorePay")
                        .HasColumnType("int")
                        .HasColumnName("SCORE_PAY");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("CUSTOMERS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.CustomerType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerTypeName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("CUSTOMER_TYPE_NAME");

                    b.Property<string>("DiscountUnit")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DISCOUNT_UNIT")
                        .IsFixedLength(true);

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_VALUE");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMER_TYPES");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Geomancy", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("GEOMANCIES");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("NameImages")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAME_IMAGES");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_ID")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ORDER_DETAIL_ID")
                        .IsFixedLength(true);

                    b.Property<string>("OrderId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ORDER_ID")
                        .IsFixedLength(true);

                    b.Property<string>("ProductDetailId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_DETAIL_ID")
                        .IsFixedLength(true);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int?>("SalePrice")
                        .HasColumnType("int")
                        .HasColumnName("SALE_PRICE");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("ORDER_DETAILS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.OrderProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("AddressDelivery")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDRESS_DELIVERY");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUSTOMER_ID")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerTypeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUSTOMER_TYPE_ID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("DATE_CREATED");

                    b.Property<DateTime?>("DatePay")
                        .HasColumnType("date")
                        .HasColumnName("DATE_PAY");

                    b.Property<string>("IdUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID_USER")
                        .IsFixedLength(true);

                    b.Property<string>("MailNonCus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MAIL_NON_CUS");

                    b.Property<string>("NameCusNonAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME_CUS_NON_ACCOUNT");

                    b.Property<string>("OrderState")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ORDER_STATE");

                    b.Property<int?>("Pay")
                        .HasColumnType("int")
                        .HasColumnName("PAY");

                    b.Property<string>("PayType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PAY_TYPE");

                    b.Property<string>("PhoneNonAccount")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PHONE_NON_ACCOUNT")
                        .IsFixedLength(true);

                    b.Property<string>("PromotionId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PROMOTION_ID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("date")
                        .HasColumnName("SHIP_DATE");

                    b.Property<int?>("ShipFee")
                        .HasColumnType("int")
                        .HasColumnName("SHIP_FEE");

                    b.Property<decimal?>("TotalPay")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TOTAL_PAY");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IdUser");

                    b.HasIndex("PromotionId");

                    b.ToTable("ORDER_PRODUCTS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<bool>("BestSeller")
                        .HasColumnType("bit")
                        .HasColumnName("BEST_SELLER");

                    b.Property<string>("CatId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CAT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("COLOR");

                    b.Property<string>("GeomancyId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("GEOMANCY_ID")
                        .IsFixedLength(true);

                    b.Property<bool>("HomeFlag")
                        .HasColumnType("bit")
                        .HasColumnName("HOME_FLAG");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("MainStoneId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("MAIN_STONE_ID")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NOTE");

                    b.Property<string>("SubStoneId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("SUB_STONE_ID")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.HasIndex("GeomancyId");

                    b.HasIndex("MainStoneId");

                    b.HasIndex("SubStoneId");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductDetail", b =>
                {
                    b.Property<string>("ProductDetailId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_DETAIL_ID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CREATED_DATE");

                    b.Property<int?>("ImportQuantity")
                        .HasColumnType("int")
                        .HasColumnName("IMPORT_QUANTITY");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("ProductPriceId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_PRICE_ID")
                        .IsFixedLength(true);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("SIZE");

                    b.HasKey("ProductDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("PRODUCT_DETAIL");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductDiscount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("DATE_CREATED");

                    b.Property<string>("DiscountUnit")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DISCOUNT_UNIT")
                        .IsFixedLength(true);

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_VALUE");

                    b.Property<string>("GemId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("GEM_ID")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NAME");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_ID")
                        .IsFixedLength(true);

                    b.Property<string>("StoneId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("STONE_ID")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("date")
                        .HasColumnName("VALID_UNTIL");

                    b.HasKey("Id");

                    b.HasIndex("GemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoneId");

                    b.ToTable("PRODUCT_DISCOUNTS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductPrice", b =>
                {
                    b.Property<string>("ProductPriceId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_PRICE_ID")
                        .IsFixedLength(true);

                    b.Property<int?>("BasePrice")
                        .HasColumnType("int")
                        .HasColumnName("BASE_PRICE");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("CREATED_DATE");

                    b.Property<bool?>("InActive")
                        .HasColumnType("bit")
                        .HasColumnName("IN_ACTIVE");

                    b.Property<int>("SalePrice")
                        .HasColumnType("int")
                        .HasColumnName("SALE_PRICE");

                    b.HasKey("ProductPriceId");

                    b.ToTable("PRODUCT_PRICES");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Promotion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<bool>("Activate")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVATE");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CODE");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DiscountUnit")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("DISCOUNT_UNIT")
                        .IsFixedLength(true);

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("DISCOUNT_VALUE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("END_DATE");

                    b.Property<int?>("MaxDiscount")
                        .HasColumnType("int")
                        .HasColumnName("MAX_DISCOUNT");

                    b.Property<int?>("MinOrder")
                        .HasColumnType("int")
                        .HasColumnName("MIN_ORDER");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("START_DATE");

                    b.HasKey("Id");

                    b.ToTable("PROMOTIONS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.PromotionDetail", b =>
                {
                    b.Property<string>("IdPromotionDetail")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID_PROMOTION_DETAIL")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUSTOMER_ID")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerTypeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUS_TYPE_ID")
                        .IsFixedLength(true);

                    b.Property<string>("PromotionId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PROMOTION_ID")
                        .IsFixedLength(true);

                    b.HasKey("IdPromotionDetail")
                        .HasName("PK__PROMOTIO__486F6DC1627BF251");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PROMOTION_DETAIL");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("date")
                        .HasColumnName("CREATED_DATE");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("CUSTOMER_ID")
                        .IsFixedLength(true);

                    b.Property<bool?>("Is_Update")
                        .HasColumnType("bit")
                        .HasColumnName("IS_UPDATE");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("PRODUCT_ID")
                        .IsFixedLength(true);

                    b.Property<int?>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("RATE");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("REVIEWS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("ROLES");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.StoneType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("STONE_TYPES");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true);

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("IdCard")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("ID_CARD")
                        .IsFixedLength(true);

                    b.Property<string>("IdRole")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID_ROLE")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("PHONE");

                    b.Property<string>("Username")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Cart", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CARTS_CUSTOMERS");

                    b.HasOne("ElectronicCommerce.Models.OrderProduct", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_CARTS_ORDER_PRODUCTS");

                    b.HasOne("ElectronicCommerce.Models.ProductDetail", "ProductDetail")
                        .WithMany("Carts")
                        .HasForeignKey("ProductDetailId")
                        .HasConstraintName("FK__CARTS__PRODUCT_D__0697FACD");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.CategoryProduct", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.CategoryProduct", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK__CATEGORY___PAREN__3A4CA8FD");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Customer", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_CUSTOMERS_CUSTOMER_TYPES");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Image", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_IMAGES_PRODUCTS");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.OrderDetail", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.OrderProduct", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__ORDER_DET__ORDER__0A688BB1");

                    b.HasOne("ElectronicCommerce.Models.ProductDetail", "ProductDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductDetailId")
                        .HasConstraintName("FK__ORDER_DET__PRODU__0B5CAFEA");

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.OrderProduct", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Customer", "Customer")
                        .WithMany("OrderProducts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ORDER_PRODUCTS_CUSTOMERS");

                    b.HasOne("ElectronicCommerce.Models.User", "IdUserNavigation")
                        .WithMany("OrderProducts")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_ORDER_PRODUCTS_USERS");

                    b.HasOne("ElectronicCommerce.Models.Promotion", "PromotionIdNavigation")
                        .WithMany("OrderProducts")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_PromotionOrder");

                    b.Navigation("Customer");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("PromotionIdNavigation");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Product", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.CategoryProduct", "Cat")
                        .WithMany("Products")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_PRODUCTS_CATEGORY_PRODUCTS");

                    b.HasOne("ElectronicCommerce.Models.Geomancy", "Geomancy")
                        .WithMany("Products")
                        .HasForeignKey("GeomancyId")
                        .HasConstraintName("FK_PRODUCTS_GEOMANCIES");

                    b.HasOne("ElectronicCommerce.Models.StoneType", "MainStone")
                        .WithMany("ProductMainStones")
                        .HasForeignKey("MainStoneId")
                        .HasConstraintName("FK__PRODUCTS__MAIN_S__3C34F16F");

                    b.HasOne("ElectronicCommerce.Models.StoneType", "SubStone")
                        .WithMany("ProductSubStones")
                        .HasForeignKey("SubStoneId")
                        .HasConstraintName("FK__PRODUCTS__SUB_ST__3D2915A8");

                    b.Navigation("Cat");

                    b.Navigation("Geomancy");

                    b.Navigation("MainStone");

                    b.Navigation("SubStone");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductDetail", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__PRODUCT_D__PRODU__625A9A57");

                    b.HasOne("ElectronicCommerce.Models.ProductPrice", "ProductPrice")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductPriceId")
                        .HasConstraintName("FK__PRODUCT_D__PRODU__634EBE90");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductDiscount", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Geomancy", "Geomancy")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("GemId")
                        .HasConstraintName("FK_pdc_gem");

                    b.HasOne("ElectronicCommerce.Models.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PRODUCT_DISCOUNTS_PRODUCTS");

                    b.HasOne("ElectronicCommerce.Models.StoneType", "StoneType")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("StoneId")
                        .HasConstraintName("FK_pdc_stone");

                    b.Navigation("Geomancy");

                    b.Navigation("Product");

                    b.Navigation("StoneType");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.PromotionDetail", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Customer", "Customer")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_PROMOTION_DETAIL_CUSTOMERS");

                    b.HasOne("ElectronicCommerce.Models.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("ElectronicCommerce.Models.Promotion", "Promotion")
                        .WithMany("PromotionDetails")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_PROMOTION_DETAIL_PROMOTIONS");

                    b.Navigation("Customer");

                    b.Navigation("CustomerType");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Review", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_REVIEWS_CUSTOMERS");

                    b.HasOne("ElectronicCommerce.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_REVIEWS_PRODUCTS");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.User", b =>
                {
                    b.HasOne("ElectronicCommerce.Models.Role", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("FK_USERS_ROLES");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.CategoryProduct", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderProducts");

                    b.Navigation("PromotionDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Geomancy", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.OrderProduct", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.ProductPrice", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Promotion", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("PromotionDetails");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.StoneType", b =>
                {
                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductMainStones");

                    b.Navigation("ProductSubStones");
                });

            modelBuilder.Entity("ElectronicCommerce.Models.User", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
